generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id         Int   @id @default(autoincrement())
  email      String   @unique
  hash       String   @map("password_hash")
  uuid       String   @default(uuid())
  first_name  String?  @db.VarChar(35)
  last_name  String?  @db.VarChar(35)
  age        Int?
  gender     Gender
  role       Role     @default(USER)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  is_active  Boolean  @default(false)
  // userSneakers SneakerData[]
  profile Profile?
  @@map("users")
}
model SneakerData {
  id Int @id @default(autoincrement())
  title String @unique
  image_url String @map("imageUrl") 
  price Int
  forWho GenSneak @default(all)
  // size String
  isFavourite Boolean @default(false)
  typeOfSneakers Type  @default(all)
  isAvailabile Boolean @default(true)
  @@map("SneakInfo")
}
enum GenSneak{
  forM
  forW
  unisex
  all
}
enum Type{
  sneakers
  boots
  basketball
  all
}
enum Gender{
  male
  female
}

model Profile {
  id        Int  @id @default(autoincrement())
  nickName  String
  userId    Int  @unique
  user      User @relation(fields: [userId], references: [id])
}

// model Post {
//   id         Int   @id @default(autoincrement())
//   title      String
//   content    String
//   published  Boolean
//   author_id  Int
//   created_at DateTime @default(now())
//   updated_at DateTime @updatedAt
//   author     User     @relation(fields: [author_id], references: [id])
//   categories Category[]
//   @@map("posts")
// }

// model Category {
//   id    Int    @id @default(autoincrement())
//   name  String
//   posts Post[]
// }

enum Role {
  USER
  ADMIN
}